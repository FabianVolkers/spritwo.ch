name: Google Calendar Sync and Update Target Date

on:
  schedule:
    - cron: '0 * * * *' # Run every hour
  workflow_dispatch:

jobs:
  sync:
    runs-on: ubuntu-latest

    outputs:
      json_updated: ${{ steps.check_json.outputs.json_updated }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: main
        fetch-depth: 0
        token: ${{ secrets.GH_TOKEN }}

    - name: Create and checkout new branch
      run: |
        git checkout -b calendar-sync-update

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client pytz

    - name: Fetch Google Calendar events and save to JSON
      env:
        GOOGLE_CALENDAR_ID: ${{ secrets.GOOGLE_CALENDAR_ID }}
        GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY }}
      run: |
        echo "$GOOGLE_SERVICE_ACCOUNT_KEY" > service_account_key.json
        python .github/workflow-helpers/fetch_calendar_events.py

    - name: Check if JSON has changed
      id: check_json
      run: |
        git diff --quiet .github/workflow-helpers/calendar_events.json
        JSON_UPDATED=$?
        echo "::set-output name=json_updated::$JSON_UPDATED"

    - name: Commit and push changes
      if: ${{ steps.check_json.outputs.json_updated == '1' }}
      id: commit_changes
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "FabianVolkers@users.noreply.github.com"
        git add .github/workflow-helpers/calendar_events.json
        git commit -m "Update calendar_events.json with latest events"
        git push origin calendar-sync-update || exit 0

  update_target_date:
    if: ${{ needs.sync.outputs.json_updated == '1' }}
    needs: sync
    runs-on: ubuntu-latest
    outputs:
      target_date_updated: ${{ steps.check_target_date.outputs.target_date_updated }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        ref: calendar-sync-update
        fetch-depth: 0
        token: ${{ secrets.GH_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        python -m pip install --upgrade pip
        pip install pytz

    - name: Update target date in index.markdown
      run: |
        python .github/workflow-helpers/update_target_date.py

    - name: Check if target_date has changed
      id: check_target_date
      run: |
        git diff --quiet index.markdown
        TARGET_DATE_UPDATED=$?
        echo "::set-output name=target_date_updated::$TARGET_DATE_UPDATED"

    - name: Commit and push changes
      if: ${{ steps.check_target_date.outputs.target_date_updated == '1' }}
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "FabianVolkers@users.noreply.github.com"
        git add index.markdown
        git commit -m "Update target_date in index.markdown" || exit 0
        git push origin calendar-sync-update

    - name: Create pull request
      if: ${{ steps.check_target_date.outputs.target_date_updated == '1' }}
      id: create_pr
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        response=$(curl -s -w "%{http_code}" -X POST -H "Accept: application/vnd.github+json" -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/${{ github.repository }}/pulls" -d '{"title":"Update target_date in index.markdown","head":"calendar-sync-update","base":"main","maintainer_can_modify": true}')
        status_code=$(echo "$response" | tail -n1)
        pr_data=$(echo "$response" | head -n-1)
        if [ $status_code -ne 201 ]; then
          echo "Failed to create pull request"
          exit 1
        fi
        pr_id=$(echo "$pr_data" | jq '.number')
        echo "::set-output name=pr_id::$pr_id"

    - name: Merge pull request
      if: ${{ steps.create_pr.outputs.pr_id != null }}}
      id: merge_pr
      env:
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
      run: |
        pr_id=${{ steps.create_pr.outputs.pr_id }}
        response=$(curl -s -w "%{http_code}" -X PUT -H "Accept: application/vnd.github+json" -H "Authorization: token $GH_TOKEN" "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_id/merge")
        status_code=$(echo "$response" | tail -n1)
        if [ $status_code -ne 200 ]; then
          echo "Failed to merge pull request"
          exit 1
        fi
        echo "::set-output name=merge_status::$status_code"

    - name: Delete calendar-sync-update branch
      if: ${{ steps.merge_pr.outputs.merge_status == 200 }}
      run: |
        git push origin --delete calendar-sync-update

